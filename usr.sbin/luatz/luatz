#!/usr/libexec/flua

require("dialog_wrap")

--TODO:
--	add better description text
--	add CLDR support maybe
--	make UTC work

COUNTRY_FILENAME = "/usr/share/misc/iso3166"
ZONEINFO_FILENAME = "/usr/share/zoneinfo/zone1970.tab"

continent_order = {"Africa", "America", "Antarctica", "Asia", "Atlantic",
		   "Australia", "Europe", "Indian", "Pacific", "UTC"}

continents = {
	Asia 		= {countries = {}},
	America 	= {countries = {}},
	Europe 		= {countries = {}},
	Africa 		= {countries = {}},
	Antarctica 	= {countries = {}},
	Australia 	= {countries = {}},
	Atlantic 	= {countries = {}, ocean = true},
	Pacific 	= {countries = {}, ocean = true},
	Indian 		= {countries = {}, ocean = true},
	UTC 		= {countries = {}},
}

-- Format :
-- countries[two_letter_country_code] = {
--	name = full_name_of_country,
--	tzs = array_of_timezones_of_country
-- }
countries = {}

local function pickContinentDialog(default_continent)
	local default_option = 0

	for i, continent in ipairs(continent_order) do
		if (continent == default_continent) then
			default_option = i - 1
		end
	end

	local retcode, cont = dialogMenu("Pick a continent",
	    "description", 20, 50, 10, 10, default_option,
	    continent_order,
	    {"", "(North and South)", "", "", "", "", "", "", "", ""})

	if (retcode == 0) then
		return retcode, cont:match("^%g*")
	else
		return retcode
	end
end

local function pickCountryDialog(continent, default_country)
	local width = 0
	local keys = {}
	local vals = {}
	local countries_in_cont = continents[continent].countries
	local height = #countries_in_cont + 8
	local title_text
	local default_option = 0

	if (continents[continent].ocean) then
		title_text = "Islands and groups in the " .. continent .. " Ocean"
	else
		title_text = "Countries in " .. continent
	end

	width = #title_text + 7

	for i, country_code in ipairs(countries_in_cont) do
		table.insert(keys, country_code)
		table.insert(vals, countries[country_code].name)
		width = math.max(width, #country_code + #countries[country_code].name + 10)

		if (country_code == default_country) then
			default_option = i-1
		end
	end
	
	local retcode, country_code = dialogMenu(title_text,
	    "select a country or region", height, width, height,
	    #countries_in_cont, default_option, keys, vals)
	return retcode, country_code
end

local function pickTimezoneDialog(country)
	local tzs = countries[country].tzs

	if (#tzs > 1) then
		local width = 0
		local height = #tzs + 8
		local keys = {}
		local vals = {}

		for i, tz in ipairs(tzs) do
			table.insert(keys, tz.name)
			table.insert(vals, tz.comment)
			width = math.max(width, #tz.name + #tz.comment + 10)
		end

		local retcode, tz_name = dialogMenu("Pick a Timezone",
		    "description", height, width, height, #tzs, 0, keys, vals)
		return retcode, tz_name
	else
		return 0, tzs[1].name
	end
end

local function splitString(str, char)
	local split_list = {}
	local pattern = "[^" .. char .. "]+"

	for match in str:gmatch(pattern) do
		table.insert(split_list, match)
	end

	return split_list
end

-- Inserts a country code into a continent's array
-- of countries, sorted by the country's full name
local function insertCountry(country_code, continent)
	local country_list = continents[continent].countries

	for i, country in ipairs(country_list) do
		-- don't put in duplicates
		if (country == country_code) then
			return
		elseif (countries[country_code].name < countries[country].name) then
			table.insert(country_list, i, country_code)
			return
		end
	end

	-- list was empty, or this country comes last
	table.insert(country_list, country_code)
	return
end

local function getCountryCodes()
	
	for line in io.lines(COUNTRY_FILENAME) do
		if (not (line:sub(1,1) == "#")) then
			local split_list = splitString(line, "\t")
			local country_code = split_list[1]
			local country_name = split_list[4]

			countries[country_code] =
			    {name = country_name, tzs = {}}
		end
	end
end

local function getTimezoneCodes()

	for line in io.lines(ZONEINFO_FILENAME) do
		if (not (line:sub(1, 1) == "#")) then
			local split_list = splitString(line, "\t")

			local country_codes = split_list[1]
			local country_list = splitString(country_codes, ",")

			local tz_name = split_list[3]
			local tz_continent = tz_name:match("^[^/]*")

			-- This may be nil but that's okay
			local comment = split_list[4]

			local tz = {name = tz_name, comment = comment}

			for i, country_code in pairs(country_list) do
				--put the country in the continent
				insertCountry(country_code, tz_continent)

				--put the timezone in the country
				table.insert(countries[country_code].tzs, tz)
			end
		end
	end
end

local function getopt(argc, argv, optstr)
	local coll = getOpt(argc, argv, optstr)
	local count = #coll
	local index = 0

	return function ()
		index = index + 1
		if index <= count then
			return coll[index].ch, coll[index].optarg, coll[index].optind
		end
	end
end

local function main()
	local state = 0
	local retcode, continent, country, timezone
	local ch, optarg

	for ch, optarg, optind in getopt(#arg, arg, "C:nrs") do
		if (ch == "n") then
		elseif (ch == "r") then
		elseif (ch == "s") then
		elseif (ch == "C") then
		else
			print("TODO WRITE ERROR MESSAGE")
			return
		end

		ch = getOpt(#arg, arg, "C:nrs")
	end

	initDialog()
	getCountryCodes()
	getTimezoneCodes()

	while (true) do
		if (state == 0) then
			retcode, continent = pickContinentDialog(continent)
			if (retcode == 0) then
				state = 1
			else
				break
			end
		elseif (state == 1) then
			retcode, country = pickCountryDialog(continent, country)
			if (retcode == 0) then
				state = 2
			else
				state = 0
			end
		elseif (state == 2) then
			retcode, timezone = pickTimezoneDialog(country)
			if (retcode == 0) then
				break
			else
				state = 1
			end
		end
		dialogClear()
	end

	dialogClear()
	endDialog()
	print(timezone)
end


main()
